=head1 NAME

aebar - it`s simply bar

=head1 SYNOPSIS

I<aebar> [-h | -g I<width>B<x>I<height>B<+>I<x>B<+>I<y> | -b | -d | -f I<font> | -p | -n I<name> | -u I<pixel> | -B I<color> | -F I<color> | -U I<color> | -o I<offset> ]

=head1 DESCRIPTION

B<aebar> is a simple bar based on XCB

=head1 OPTIONS

=over

=item B<-h>

display the help and exit

=item B<-g> I<width>B<x>I<height>B<+>I<x>B<+>I<y>

set the window geometry (if a parameter is omitted it's filled with the default value) if the I<y> parameter is specified along with the B<-b> switch then the position is relative to the bottom of the screen.

=item B<-b>

dock the bar at the bottom of the screen

=item B<-d>

force docking

=item B<-f> I<font>

define the font to load into one of the five slots. (its supports fontconfig font specifiers and anti-aliased fonts)

=item B<-a> I<number>

set number of clickable areas (default is 10)

=item B<-p>

make the bar permanent

=item B<-n> I<name>

set the WM_NAME atom value for the bar.

=item B<-u> I<pixel>

sets the underline width in pixels. The default is 1.

=item B<-B> I<color>

set the background color of the bar = I<color> must be specified in the hex format (#aarrggbb, #rrggbb, #rgb) if no compositor such as compton or xcompmgr is running the alpha channel is silently ignored.

=item B<-F> I<color>

set the foreground color of the bar (accepts the same color formats as B<-B>)

=item B<-o> I<offset>

add a vertical offset to the text I<offset> must be a number and can be negative (I<-o -3> will push the text 3 pixels up)

=item B<-U> I<color>

set the underline color of the bar (accepts the same color formats as B<-B>)

=back

=head1 FORMATTING

aebar provides a screenrc-inspired formatting syntax to allow full customization at runtime, every formatting block is opened with C<%{> and closed by C<}> and accepts the following commands, the parser tries it's best to handle malformed input (use C<%%> to get a literal percent sign {C<%>})

=over

=item B<R>

swap the current background and foreground colors.

=item B<l>

aligns the following text to the left side of the screen.

=item B<c>

aligns the following text to the center of the screen.

=item B<r>

aligns the following text to the right side of the screen.

=item B<O> I<width>

offset the current position by I<width> pixels in the alignment direction.

=item B<B> I<color>

set the text background color (the parameter I<color> can be I<-> or a color in one of the formats mentioned before) [The special value I<-> resets the color to the default one]

=item B<F> I<color>

set the text foreground color. the parameter I<color> can be I<-> or a color in one of the formats mentioned before) the special value I<-> resets the color to the default one.

=item B<T> I<index>

set the font used to draw the following text (the parameter I<index> can either be I<-> or the 1-based index of the slot which contains the desired font) If the parameter is I<-> aebar resets to the normal behavior (matching the first font that can be used for the character) if the selected font can't be used to draw a character, aebar will fall back to normal behavior for that character.

=item B<U> I<color>

set the text underline color : the parameter I<color> can be I<-> or a color in one of the formats mentioned before (the special value I<-> resets the color to the default one).

=item B<A> I<button>:I<command>:

create a clickable area starting from the current position, when the area is clicked I<command> is printed on stdout (the area is closed when a B<A> token, not followed by : is encountered).

eg. I<%{A:reboot:} click here to reboot %{A}>

the I<button> field is optional, it defaults to the left button, and it's a number ranging from 1 to 5 which maps to the left, middle, right, scroll up and scroll down movements.

nested clickable areas can trigger different commands.

eg. I<%{A:reboot:}%{A3:halt:} left click to reboot, right click to shutdown %{A}%{A}>

=item B<S> I<dir>

change the monitor the bar is rendered to (I<dir> can be either)

=over

=item B<+>/B<->

next/previous monitor

=item B<f>/B<l>

first/last monitor

=item I<0-9>

nth monitor

=back

=back

B<attribute modifiers>

=over

=item B<+>I<attribute>

set the attribute I<attribute> for the following text

=item B<->I<attribute>

unset the attribute I<attribute> for the following text

=item B<!>I<attribute>

toggle the attribute I<attribute> for the following text

=back

where I<attribute> is one of the following

=over

=item B<o>

draw a line over the text

=item B<u>

draw a line under the text

=back

=head1 OUTPUT

clicking on an area makes aebar output the command to stdout, followed by a newline

 Simply and powerful AEEE

=head1 GIT

L<git repository|https://github.com/kurumihere/aebar>

=head1 AUTHOR

2025 (C) kurumi(fuck)

